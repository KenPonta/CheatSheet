const express = require('express');
const cors = require('cors');
const path = require('path');
const fs = require('fs');

const app = express();
const PORT = process.env.PORT || 4000;

// Middleware - Allow all origins for now
app.use(cors({
  origin: '*',
  credentials: false, // Must be false when origin is *
  methods: ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS'],
  allowedHeaders: ['Content-Type', 'Authorization', 'ngrok-skip-browser-warning']
}));
app.use(express.json({ limit: '50mb' }));
app.use(express.urlencoded({ extended: true, limit: '50mb' }));

// Health check
app.get('/health', (req, res) => {
  res.json({ status: 'ok', service: 'backend', timestamp: new Date().toISOString() });
});

// Import and mount API routes
const apiRoutes = [
  'analyze-reference-template',
  'content-modification',
  'content-utilization',
  'extract-topics',
  'extract-topics-space-aware',
  'generate-compact-study',
  'monitoring',
  'recreate-images',
  'reference-format-matching',
  'regenerate-images',
  'space-optimization'
];

// Simple API routes for now - we'll add the complex ones later
app.get('/api/health', (req, res) => {
  res.json({ 
    status: 'ok', 
    service: 'backend-api', 
    timestamp: new Date().toISOString(),
    port: PORT 
  });
});

// Test route
app.post('/api/test', (req, res) => {
  res.json({ message: 'Backend is working!', body: req.body });
});

// Generate compact study route with real processing
app.post('/api/generate-compact-study', async (req, res) => {
  console.log('Received generate-compact-study POST request');
  
  try {
    const { files, config, selectedTopics } = req.body;
    
    // Validate request
    if (!files || !Array.isArray(files) || files.length === 0) {
      return res.status(400).json({
        error: 'No files provided',
        success: false
      });
    }

    console.log(`Processing ${files.length} files with config:`, config);
    
    // Process files (simplified version)
    let processedContent = '';
    let totalTopics = 0;
    
    for (const file of files) {
      console.log(`Processing file: ${file.name}`);
      
      // Decode base64 content if needed
      let content = file.content;
      if (content.startsWith('data:')) {
        // Extract base64 part
        const base64Data = content.split(',')[1];
        content = Buffer.from(base64Data, 'base64').toString('utf-8');
      }
      
      // Simple text processing (you can enhance this)
      const lines = content.split('\n').filter(line => line.trim());
      totalTopics += Math.ceil(lines.length / 10); // Rough topic estimation
      
      processedContent += `
        <div class="file-section">
          <h2>${file.name}</h2>
          <div class="content">
            ${lines.slice(0, 20).map(line => `<p>${line}</p>`).join('')}
            ${lines.length > 20 ? '<p><em>... content truncated for demo ...</em></p>' : ''}
          </div>
        </div>
      `;
    }
    
    // Generate response based on config
    const layoutClass = config?.layout === 'compact' ? 'compact-layout' : 'standard-layout';
    const columns = config?.columns || 2;
    
    const htmlContent = `
      <div class="${layoutClass}" style="columns: ${columns}; column-gap: 20px;">
        <h1>Compact Study Guide</h1>
        <div class="metadata">
          <p><strong>Generated:</strong> ${new Date().toLocaleString()}</p>
          <p><strong>Layout:</strong> ${config?.layout || 'standard'}</p>
          <p><strong>Files processed:</strong> ${files.length}</p>
        </div>
        ${processedContent}
        <div class="footer">
          <p><em>Generated by CheeseSheet Backend</em></p>
        </div>
      </div>
    `;
    
    const response = {
      success: true,
      message: 'Study guide generated successfully',
      html: htmlContent,
      metadata: {
        generatedAt: new Date().toISOString(),
        format: 'html',
        sourceFiles: files.map(f => f.name),
        stats: {
          totalSections: files.length,
          totalFormulas: 0,
          totalExamples: Math.ceil(totalTopics / 2),
          estimatedPrintPages: Math.ceil(totalTopics / 5),
          totalImages: 0
        },
        preservationScore: 85
      },
      warnings: files.length > 5 ? ['Large number of files may affect performance'] : []
    };
    
    console.log('Successfully processed files');
    res.json(response);
    
  } catch (error) {
    console.error('Error processing compact study:', error);
    res.status(500).json({
      error: 'Failed to process files',
      message: error.message,
      success: false
    });
  }
});

// Clear cache route
app.post('/api/generate-compact-study/clear-cache', (req, res) => {
  res.json({ success: true, message: 'Cache cleared (mock)' });
});

console.log('Available routes:');
console.log('GET /api/health');
console.log('POST /api/test');
console.log('POST /api/generate-compact-study');
console.log('POST /api/generate-compact-study/clear-cache');

// Error handling
app.use((error, req, res, next) => {
  console.error('Backend error:', error);
  res.status(500).json({ 
    error: 'Internal server error',
    message: process.env.NODE_ENV === 'development' ? error.message : 'Something went wrong'
  });
});

app.listen(PORT, '0.0.0.0', () => {
  console.log(`Backend server running on port ${PORT}`);
});